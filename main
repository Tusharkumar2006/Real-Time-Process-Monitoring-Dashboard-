#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/sysinfo.h>
#include <pthread.h>
#include <ncurses.h>
#include <string.h>
#include <signal.h>

// Global variables
int cpu_usage = 0;
long memory_free = 0;
long memory_total = 0;
char process_list[10][256];

// Function to monitor CPU usage
void* monitor_cpu(void* arg) {
    while (1) {
        FILE *fp;
        char buffer[256];
        fp = popen("top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}'", "r");
        if (fp == NULL) {
            perror("Error reading CPU usage");
            exit(1);
        }

        if (fgets(buffer, sizeof(buffer), fp) != NULL) {
            cpu_usage = (int) atof(buffer);
        }
        fclose(fp);
        sleep(1);
    }
    return NULL;
}

// Function to monitor memory usage
void* monitor_memory(void* arg) {
    while (1) {
        struct sysinfo si;
        sysinfo(&si);
        memory_total = si.totalram / (1024 * 1024);  // MB
        memory_free = si.freeram / (1024 * 1024);    // MB
        sleep(1);
    }
    return NULL;
}

// Function to monitor top processes
void* monitor_processes(void* arg) {
    while (1) {
        FILE *fp = popen("ps aux --sort=-%mem | head -n 11", "r");
        if (fp == NULL) {
            perror("Error reading process list");
            exit(1);
        }

        char buffer[256];
        int i = 0;
        while (fgets(buffer, sizeof(buffer), fp) != NULL && i < 10) {
            strcpy(process_list[i], buffer);
            i++;
        }
        fclose(fp);
        sleep(1);
    }
    return NULL;
}

// Display info using ncurses
void display_info() {
    clear();
    mvprintw(1, 2, "Real-Time Process Monitoring Dashboard");
    mvprintw(3, 2, "CPU Usage: %d%%", cpu_usage);
    mvprintw(4, 2, "Memory Usage: %ld MB free / %ld MB total", memory_free, memory_total);
    mvprintw(6, 2, "Top 10 Processes by Memory Usage:");

    for (int i = 0; i < 10; i++) {
        mvprintw(7 + i, 2, "%s", process_list[i]);
    }

    mvprintw(18, 2, "Commands: [q] Quit  [k] Kill Process  [p] Pause Process");
    refresh();
}

// Handle user input
void handle_input(int ch) {
    char pid_str[10], command[50];
    int pid;

    switch (ch) {
        case 'q':
            endwin();
            exit(0);
        case 'k':
            mvprintw(20, 2, "Enter PID to kill: ");
            echo();
            getstr(pid_str);
            noecho();
            pid = atoi(pid_str);
            sprintf(command, "kill %d", pid);
            system(command);
            break;
        case 'p':
            mvprintw(20, 2, "Enter PID to pause: ");
            echo();
            getstr(pid_str);
            noecho();
            pid = atoi(pid_str);
            sprintf(command, "kill -STOP %d", pid);
            system(command);
            break;
    }
}

int main() {
    initscr();             // Start ncurses
    noecho();              // Don't echo user input
    cbreak();              // Disable line buffering
    timeout(1000);         // Wait 1s for input

    pthread_t t_cpu, t_mem, t_proc;
    pthread_create(&t_cpu, NULL, monitor_cpu, NULL);
    pthread_create(&t_mem, NULL, monitor_memory, NULL);
    pthread_create(&t_proc, NULL, monitor_processes, NULL);

    while (1) {
        display_info();
        int ch = getch();
        if (ch != ERR) {
            handle_input(ch);
        }
    }

    endwin();
    return 0;
}
